if game.CoreGui:FindFirstChild("Mana") then
    game.CoreGui.Mana:Destroy()
end

local UIlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/JellyBagBeans/CelestialHub/main/Main"))()

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end

   local Win = UIlib:Window("Welcome","".. game.Players.LocalPlayer.Name)
   local AutoTab = Win:Tab("Auto Farm")
   local EggTab = Win:Tab("Eggs")
   local GUITab = Win:Tab("GUI's")
   local MiscTab = Win:Tab("Misc")
   local plr = game.Players.LocalPlayer
   local customModules = {}


local plr = game.Players.LocalPlayer
local customModules = {}

customModules.bypassAntiCheat = function()
    plr.Character.Humanoid.WalkSpeed = 100
    local old; old = hookmetamethod(game, "__namecall", function(self, ...) 
        if self == plr and getnamecallmethod() == "Kick" and not checkcaller() then 
            plr.Character.Humanoid.WalkSpeed = 16
            return task.wait(99e99)
        end
        return old(self, ...)
    end)
end

coroutine.wrap(function() 
    pcall(function() 
        if getconnections then 
            repeat
                for i,v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
                    v:Disable()
                end
                task.wait(5)
            until false == true
        end
    end)
end)()

customModules.bypassAntiCheat()

customModules.getZones = function()
    local worlds = {}
    for i,v in pairs(require(game:GetService("ReplicatedStorage").Game.Worlds)) do
        worlds[v.Order] = i
    end
    
    for i = 1,#worlds do
        local test = #worlds - i + 1
        worlds[i], worlds[test] = worlds[test], worlds[i]
    end
    return worlds
end

customModules.loadAllZones = function()
    for i,v in next, game:GetService("ReplicatedStorage").Chunks:children() do
        if v:FindFirstChild("Items") then
            v.Items.Parent = workspace.GameObjects.Areas[v.Name]
        end
    end
end

customModules.getZonesItems = function(zone)
    if not workspace.GameObjects.Areas[zone] then return warn("Invalid Zone") end
    if not workspace.GameObjects.Areas[zone].Items then return warn("No Items Loaded") end
    local items = {"All"}
    for i,v in pairs(game.Workspace.GameObjects.Areas[zone].Items:GetChildren()) do
        local name = v.Name:gsub('%d+','');
        if not table.find(items, name) then
            table.insert(items, name);
        end
    end
    print("here")
    return items
end

customModules.getEggs = function()
    local eggs = {}
    for i,v in next, workspace.GameObjects.Eggs:children() do
        table.insert(eggs,v.Name)
    end
    return eggs
end

customModules.getPetsFromEgg = function(egg)
    local pets = {}
    for i,v in next, require(game:GetService("ReplicatedStorage").Game.Eggs)[egg].Pets do
        table.insert(pets,i)
    end
    return pets
end

customModules.getHatsFromZone = function(zone)
    local hats = {}
    print(zone)
    for i,v in next, require(game:GetService("ReplicatedStorage").Game.Hats)[zone] do
        table.insert(hats,v.RealName)
    end
    return hats
end

customModules.getNearestItem = function(zone,select)
    if select == "All" or select == nil then select = "" end
    if not workspace.GameObjects.Areas[zone] then return end
    local item
    local nearestDist = math.huge;
    for i,v in next, workspace.GameObjects.Areas:FindFirstChild(zone).Items:GetChildren() do
        if not v.PrimaryPart then continue end
        local dist = (v.PrimaryPart.Position - plr.Character.HumanoidRootPart.Position).magnitude
        if dist < nearestDist and v.Name:match(select) then
            item = v; nearestDist = dist;
        end
    end
    return item
end

local zone
local itemSelected
local autoFarmBool
local network = require(game.ReplicatedStorage.Modules.Network)

customModules.autoFarm = function()
    task.spawn(function()
        customModules.bypassAntiCheat()
        repeat task.wait()
            if zone == nil then continue end
            if #workspace.GameObjects.Areas[zone].Items:GetChildren() == 0 then continue end
            local nearestItem = customModules.getNearestItem(zone,itemSelected)
            if nearestItem then
                plr.Character:PivotTo(nearestItem:GetPivot())
                network:FireServer("Hit",nearestItem)
            end
        until not autoFarmBool
    end)
end

local autoOrbsBool

customModules.autoOrbs = function()
    game.Workspace.Orbs.ChildAdded:connect(function(C)
        if autoOrbsBool then
            network:FireServer("CollectOrb", C.Name);
            C:Destroy()
        end
    end)
    task.spawn(function()
        while autoOrbsBool and task.wait() do
            for i,v in pairs(game.Workspace.Orbs:GetChildren()) do
                network:FireServer("CollectOrb", v.Name);
                v:Destroy();
            end
        end
    end)
end

local eggSelected
local amountToOpen = 1
local autoEggBool
local deleteList = {}

customModules.autoEgg = function()
    task.spawn(function()
        repeat task.wait(.5)
            network:InvokeServer("OpenEgg",eggSelected,amountToOpen,deleteList)
            print("hatching")
        until not autoEggBool
    end)
end

local deleteHatList = {}
local autoHatBool

customModules.autoHat = function()
    plr.PlayerGui.GameUI.Menus.Hats.MainList.ChildAdded:Connect(function(child)
        if autoHatBool then
            if deleteHatList[child.Frame.HatName.Text] then
                network:InvokeServer("DeleteHat",child.Name)
                child:Destroy()
            end
        end
    end)
end



local itemDropdown
local hatDropdown
AutoTab:Dropdown("Zone Dropdown", customModules.getZones(), function(item)
    customModules.loadAllZones()
    zone = item
    itemDropdown:Clear()
    hatDropdown:Clear()
    task.wait(0.25)
    itemDropdown:AddItems(customModules.getZonesItems(item))
    hatDropdown:AddItems(customModules.getHatsFromZone(item))
end)
local itemDropdown
AutoTab:Dropdown("Item Dropdown", {"Slect an area to farm"}, function(item)
itemSelected = item
end)

AutoTab:Toggle("Auto Farm", false, function(state)
        autoFarmBool = state
        customModules.autoFarm()
end)

AutoTab:Toggle("Auto Orbs", false, function(state)
        autoOrbsBool = state
        customModules.autoOrbs()
end)

AutoTab:Dropdown("Hats Dropdown", {"Select an area to farm"}, function(item)
        deleteHatList[tostring(item)] = true
        printtable(deleteHatList)
        hatDropdown:RemoveItems({item})
end)

AutoTab:Toggle("Auto Delete Hats", false, function(state)
        autoHatBool = state
        customModules.autoHat()
end)

--EGGS/PETS

local petsDropdown

EggTab:Dropdown("Egg Dropdown", customModules.getEggs(), function(item)
        deleteList = {}
        petsDropdown:Clear()
        eggSelected = item
        task.wait(.25)
        petsDropdown:AddItems(customModules.getPetsFromEgg(item))
end)

EggTab:Dropdown("Pets Dropdown", {"Please Select a egg"}, function(item)
        deleteList[tostring(item)] = true
        petsDropdown:RemoveItems({item})
        printtable(deleteList)
end)

EggTab:Slider("Amount to Open", 0,3,2, function(value)
    amountToOpen = value
end)

EggTab:Toggle("Auto Egg", false, function(state)
    autoEggBool = state
    customModules.autoEgg()
end)













































GUITab:Button("Open/Close Golden Pets", function()
        plr.PlayerGui.GameUI.Menus.Golden.Visible = not plr.PlayerGui.GameUI.Menus.Golden.Visible
end)

GUITab:Button("Open/Close Diamond Pets", function()
        plr.PlayerGui.GameUI.Menus.Diamond.Visible = not plr.PlayerGui.GameUI.Menus.Diamond.Visible
end)

GUITab:Button("Open/Close Rainbow Pets", function()
        plr.PlayerGui.GameUI.Menus.Rainbow.Visible = not plr.PlayerGui.GameUI.Menus.Rainbow.Visible
end)

GUITab:Button("Open/Close Shiny Hat", function()
        plr.PlayerGui.GameUI.Menus.Shiny.Visible = not plr.PlayerGui.GameUI.Menus.Shiny.Visible
end)










































MiscTab:Button("AntiCheat Bypass", function()
customModules.bypassAntiCheat = function()
    plr.Character.Humanoid.WalkSpeed = 100
    local old; old = hookmetamethod(game, "__namecall", function(self, ...) 
        if self == plr and getnamecallmethod() == "Kick" and not checkcaller() then 
            plr.Character.Humanoid.WalkSpeed = 16
            return task.wait(99e99)
        end
        return old(self, ...)
    end)
end
coroutine.wrap(function() 
    pcall(function() 
        if getconnections then 
            repeat
                for i,v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
                    v:Disable()
                end
                task.wait(5)
            until false == true
        end
    end)
end)()

customModules.bypassAntiCheat()
end)



task.spawn(function(a)
    while task.wait(0.5) do
        if AutoSellDragon then
            pcall(function()
                coroutine.wrap(function()
                local args = {
                [1] = workspace.Tycoons[selectedTycoon].Buttons.Dragon[selectedFloor][selectedDragonSpot],
                [2] = selectedDragon
                }
                game:GetService("ReplicatedStorage").Remotes.SellDragon:FireServer(unpack(args))
end)()
end)
end
end
end)
